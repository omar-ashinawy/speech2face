# -*- coding: utf-8 -*-
"""ProfilingAudioEncoder.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vHm70AgV8KAU_VQcLkA7YWu3l1yjSIt2
"""

import tensorflow as tf
import numpy as np
import os
import pathlib
import _pickle as pickle
import cProfile
from google.colab import drive
drive.mount('/content/gdrive')

audios_path = './gdrive/MyDrive/audio_pickle/'
faces_path = './gdrive/MyDrive/face_pickle/'
audios_path_npy = './gdrive/MyDrive/audio_npy/'
faces_path_npy = './gdrive/MyDrive/face_npy/'

audios_files = [f for f in os.listdir(audios_path) if os.path.isfile(os.path.join(audios_path, f))]
faces_files = [f for f in os.listdir(faces_path) if os.path.isfile(os.path.join(faces_path, f))]

i = 0
for f in faces_files:
    current_face = faces_path + f
    current_face_npy = faces_path_npy + f.replace('pkl', 'npy')
    try:    
        with open(current_face, 'rb') as pkl:
            with open(current_face_npy, 'wb') as npy:
                np.save(npy, pickle.load(pkl))
    except Exception as e:
        print(f'Couldn\'t Load Example: {str(faces_files[i])}, Error:', e)
        continue
    i += 1

class Data_Loader():
    def __init__(self):
        pass
        
    @staticmethod
    def load_data(audios_path, faces_path, start_pos, n_samples):
        if not audios_path.endswith('/'):
            audios_path += "/"
        if not faces_path.endswith('/'):
            faces_path += "/"
        available_files = []
        files_counter = 0
        i = start_pos
        while files_counter < n_samples:
            current_audio = audios_path + "audio_" + str(i) + ".pkl"
            current_face = faces_path + "face_" + str(i) + ".pkl"
            if (not os.path.exists(current_audio) or (not os.path.exists(current_face))):
                i += 1
                continue
            available_files.append(i)
            i += 1
            files_counter += 1
        stop_pos = i
        # DO NOT REMOVE THIS PRINT STATEMENT
        print(available_files)
        audios_matrix = np.zeros((len(available_files), 598, 257, 2))
        faces_matrix = np.zeros((len(available_files), 4096)) 
        for i in range(len(available_files)):
            current_audio = audios_path + "audio_" + str(available_files[i]) + ".pkl"
            current_face = faces_path + "face_" + str(available_files[i]) + ".pkl"
            try:    
                with open(current_audio, 'rb') as f:
                    audios_matrix[i] = pickle.load(f)
                with open(current_face, 'rb') as f:
                    faces_matrix[i] = pickle.load(f).reshape((4096))
            except Exception as e:
                print(f'Couldn\'t Load Example: {str(available_files[i])}, Error:', e)
                continue
        return audios_matrix, faces_matrix, stop_pos

def test():
    train_next_pos = 1
    loaded = 0
    while loaded < ((32*4)//32):
        x_train, y_train, train_next_pos = Data_Loader.load_data('./gdrive/MyDrive/audio_pickle', './gdrive/MyDrive/face_pickle', train_next_pos, 32)
        loaded += 1

cProfile.run('test()', 'encoderstats')

cProfile.run('test()', 'encoderstats')
import pstats
from pstats import SortKey
p = pstats.Stats('encoderstats')
p.strip_dirs().sort_stats(-1).print_stats()